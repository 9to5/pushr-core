#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
Bundler.require

require 'optparse'
require 'pushr/core'
require 'pushr/daemon'

settings = Pushr::Daemon::Settings.new
banner = 'Usage: pushr [options]'
connection = {}
ARGV.options do |opts|
  opts.banner = banner

  opts.on('-f', '--foreground', 'Run in the foreground. Log is not written.') do
    settings.foreground = true
  end

  opts.on('-c FILE', '--configuration FILE', 'Read the configuration from this YAML file') do |file|
    Pushr::Core.configuration_file = file
  end

  opts.on('-j JSON', '--json JSON', 'Read the configuration from this JSON') do |json|
    Pushr::Core.configuration_json = json
  end

  opts.on('-o HOST', '--redis-host HOST', String, 'Hostname of redis instance') do |host|
    connection[:host] = host
  end

  opts.on('-r PORT', '--redis-port PORT', String, 'Port of redis instance') do |port|
    connection[:port] = port
  end

  opts.on('-d DB', '--redis-db DB', String, 'Database of redis instance') do |db|
    connection[:db] = db
  end

  opts.on('-a JSON', '--redis-json JSON', String, 'Redis configuration json') do |redis|
    connection[:redis] = redis
  end

  opts.on('-n NAMESPACE', '--redis-namespace NAMESPACE', String, 'Namespace on redis connection') do |namespace|
    connection[:namespace] = namespace
  end

  opts.on('-p PATH', '--pid-file PATH', String,
          'Path to write PID file. Relative to current directory unless absolute.') do |path|
            settings.pid_file = path
          end

  opts.on('-b PATH', '--feedback-processor PATH', String,
          "Path to the feedback processor. Default: none. Example: 'lib/pushr/feedback_processor'") do |n|
            settings.feedback_processor = n
          end

  opts.on('-s PATH', '--stats-processor PATH', String,
          "Path to the stats processor. Default: none. Example: 'lib/pushr/stats_processor'") do |n|
            settings.stats_processor = n
          end

  opts.on('-v', '--version', 'Print this version of pushr.') do
    puts "pushr #{Pushr::VERSION}"
    exit
  end

  opts.on('-h', '--help', 'You\'re looking at it.') do
    puts opts
    exit
  end

  opts.parse!
end

Pushr::Core.configure do |config|
  x = { }
  x[:namespace] = connection[:namespace] if connection[:namespace]
  x[:url] = "redis://#{connection[:host]}:#{connection[:port] || 6379}/#{connection[:db] || 0}" if connection[:host]
  if connection[:redis]
    json_params = ::MultiJson.load(connection[:redis])
    redis_params = Hash.new
    json_params.each do |key, value|
      redis_params[key.to_sym] = value
    end
    x.merge! redis_params
    puts x
  end
  config.redis = x
end

if ENV['AIRBRAKE_API_KEY']
  require 'airbrake'
  settings.error_notification = true
  Airbrake.configure do |airbrake|
    airbrake.api_key = ENV['AIRBRAKE_API_KEY']
    airbrake.host    = ENV['AIRBRAKE_HOST']
    airbrake.port    = ENV['AIRBRAKE_PORT'] ? ENV['AIRBRAKE_PORT'].to_i : 80
    airbrake.secure  = airbrake.port == 443
  end
end

Pushr::Daemon.start(settings)
